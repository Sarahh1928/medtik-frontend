import{a as m,b as y}from"./chunk-CUGN3AIA.js";import{$ as p,Sc as o,T as h,Tc as f,W as b,g as c,k as d,l as i,o as l,z as a}from"./chunk-HKUWCROW.js";var v=class u{http=p(f);auth=p(y);baseUrl=m.apiBaseUrl;profileSubject=new c(null);lockedSubject=new c(!0);loadingSubject=new c(!1);profile$=this.profileSubject.asObservable();locked$=this.lockedSubject.asObservable();loading$=this.loadingSubject.asObservable();get lockedValue(){return console.log("\u{1FA7A} Doctor profile locked status:",this.lockedSubject.value),this.lockedSubject.value}get currentProfile(){return this.profileSubject.value}loadProfile(t=!1){let e=this.profileSubject.value;if(e&&!t)return d(e);let r=this.auth.getToken();if(!r)return i(()=>"Doctor session expired. Please log in again.");let n=new o({Authorization:`Bearer ${r}`});return this.loadingSubject.next(!0),this.http.get(`${this.baseUrl}/doctor/profile`,{headers:n}).pipe(l(s=>s.doctor),h(s=>{this.profileSubject.next(s),this.lockedSubject.next(this.computeLocked(s)),this.loadingSubject.next(!1)}),a(s=>this.handleError(s)))}refreshProfile(){return this.profileSubject.next(null),this.lockedSubject.next(!0),this.loadProfile(!0)}updateProfile(t){let e=this.auth.getToken();if(!e)return i(()=>"Doctor session expired. Please log in again.");let r=new o({Authorization:`Bearer ${e}`});return this.http.put(`${this.baseUrl}/doctor/update`,t,{headers:r}).pipe(l(n=>n.doctor),h(n=>{this.profileSubject.next(n),this.lockedSubject.next(this.computeLocked(n))}),a(n=>this.handleError(n)))}markAsUnlocked(){this.lockedSubject.next(!1)}computeLocked(t){if(!t)return!0;if(t.status==="ACCEPTED")return!1;let e=!!(t.title?.trim()&&t.bio?.trim()&&t.phone?.trim()&&t.department&&t.yearsOfExperience!=null&&Number(t.yearsOfExperience)>0&&t.licenseNumber?.trim()&&t.avatarUrl?.trim()),r=(t.languages?.length??0)>0,s=Array.isArray(t.pricing)&&t.pricing.length>0?["CHAT","VOICE","VIDEO"].every(D=>t.pricing.some(g=>g.service===D&&!!g.currency?.trim()&&Number(g.price)>0)):!1,P=!!t.availability&&(t.availability.chat||t.availability.voice||t.availability.video);return!0}handleError(t){this.loadingSubject.next(!1);let e="Unable to load doctor profile. Please try again.",r=t.error;return r?typeof r=="string"?e=r:typeof r=="object"&&(e=r.error??r.message??e):t.message&&(e=t.message),i(()=>e)}getAppointments(t){let e=this.auth.getToken();if(!e)return i(()=>new Error("Doctor session expired."));let r=new o({Authorization:`Bearer ${e}`});return this.http.get(`${this.baseUrl}/appointments`,{headers:r}).pipe(a(n=>i(()=>n)))}getNotifications(){let t=this.auth.getToken();if(!t)return i(()=>new Error("Doctor session expired."));let e=new o({Authorization:`Bearer ${t}`});return this.http.get(`${this.baseUrl}/notifications`,{headers:e}).pipe(l(r=>r.notifications||[]),a(r=>{let n="Failed to load notifications";return r?.error?.message&&(n=r.error.message),i(()=>new Error(n))}))}getHeaders(){let t=this.auth.getToken();if(!t)throw new Error("Doctor session expired.");return{headers:new o({Authorization:`Bearer ${t}`})}}getProfile(){return this.http.get(`${this.baseUrl}/doctor/profile`,this.getHeaders())}addSlot(t){return console.log("Adding slot with body:",t),this.http.post(`${this.baseUrl}/doctor/addSlot`,t,this.getHeaders())}getPatients(){return this.http.get(`${this.baseUrl}/doctor/getMyPatients`,this.getHeaders())}getMyPatients(){return this.http.get(`${this.baseUrl}/doctor/getMyPatients`,this.getHeaders()).pipe(l(t=>t.patients))}sendMessageToServer(t,e){let r=this.auth.getToken();if(!r)return i(()=>new Error("Patient session expired."));let n=new o({Authorization:`Bearer ${r}`});return this.http.post(`${this.baseUrl}/chat/send`,{receiverId:e,content:t,type:"TEXT"},{headers:n})}getChatHistory(t){let e=this.auth.getToken();if(!e)return i(()=>new Error("Patient session expired."));let r=new o({Authorization:`Bearer ${e}`});return this.http.get(`${this.baseUrl}/chat/history/${t}`,{headers:r})}cancelAppointment(t){let e=this.auth.getToken();if(!e)return i(()=>new Error("Doctor session expired."));let r=new o({Authorization:`Bearer ${e}`});return this.http.put(`${this.baseUrl}/doctor/appointments/${t}/cancel`,{},{headers:r})}noshowAppointment(t){let e=this.auth.getToken();if(!e)return i(()=>new Error("Doctor session expired."));let r=new o({Authorization:`Bearer ${e}`});return this.http.put(`${this.baseUrl}/doctor/appointments/${t}/no-show`,{},{headers:r})}deleteSlot(t){let e=this.auth.getToken();if(!e)return i(()=>new Error("Doctor session expired."));let r=new o({Authorization:`Bearer ${e}`});return this.http.delete(`${this.baseUrl}/doctor/slots/${t}`,{headers:r})}postConsultationDetails(t,e){let r=this.auth.getToken();if(!r)return i(()=>new Error("Doctor session expired."));let n=new o({Authorization:`Bearer ${r}`});return this.http.post(`${this.baseUrl}/doctor/consultation/${t}`,e,{headers:n})}getConsultationDetails(t){let e=this.auth.getToken();if(!e)return i(()=>new Error("Doctor session expired."));let r=new o({Authorization:`Bearer ${e}`});return this.http.get(`${this.baseUrl}/doctor/consultation/${t}`,{headers:r})}updateConsultationDetails(t,e){let r=this.auth.getToken();if(!r)return i(()=>new Error("Doctor session expired."));let n=new o({Authorization:`Bearer ${r}`});return this.http.put(`${this.baseUrl}/doctor/consultation/${t}`,e,{headers:n}).pipe(a(s=>(console.error("Consultation update failed:",s),i(()=>s))))}deleteConsultationDetails(t){let e=this.auth.getToken();if(!e)return i(()=>new Error("Doctor session expired."));let r=new o({Authorization:`Bearer ${e}`});return this.http.delete(`${this.baseUrl}/doctor/consultation/${t}`,{headers:r})}static \u0275fac=function(e){return new(e||u)};static \u0275prov=b({token:u,factory:u.\u0275fac,providedIn:"root"})};export{v as a};
