import{a as o,b as O}from"./chunk-F426BNRH.js";import{$ as d,E as i,Y as c,Yc as g,Zc as m,a as l,b,ea as h,l as u,q as r,t as s}from"./chunk-BE7DJT6W.js";var v=class p{http=h(m);auth=h(O);baseUrl=o.apiBaseUrl;baseSocketUrl=o.socketUrl;unreadCountSubject=new u(0);unreadCount$=this.unreadCountSubject.asObservable();getOptions(){if(o.production)return{withCredentials:!0};{let t=this.auth.getToken();if(!t)throw new Error("Session expired.");return{headers:new g({Authorization:`Bearer ${t}`})}}}getNotifications(){return this.http.get(`${this.baseUrl}/notifications`,this.getOptions()).pipe(s(t=>t.notifications))}clearAllNotifications(){return this.http.delete(`${this.baseUrl}/notifications/deleteAll`,this.getOptions()).pipe(i(t=>r(()=>t)))}markNotificationRead(t){return this.http.patch(`${this.baseUrl}/notifications/${t}/read`,{},this.getOptions())}markNotificationUnRead(t){return this.http.patch(`${this.baseUrl}/notifications/${t}/unread`,{},this.getOptions())}deleteNotification(t){return this.http.delete(`${this.baseUrl}/notifications/${t}`,this.getOptions())}markallNotificationRead(){return this.http.patch(`${this.baseUrl}/notifications/readAll`,{},this.getOptions())}updateUnreadCount(t){this.unreadCountSubject.next(t)}decrementUnreadCount(){this.unreadCountSubject.next(Math.max(0,this.unreadCountSubject.value-1))}incrementUnreadCount(){this.unreadCountSubject.next(this.unreadCountSubject.value+1)}getAppointments(t){return this.http.get(`${this.baseUrl}/appointments`,this.getOptions()).pipe(i(e=>r(()=>e)))}rescheduleAppointment(t){return this.http.post(`${this.baseUrl}/patient/reschedule`,t,this.getOptions()).pipe(i(e=>r(()=>e)))}cancelSlot(t){return this.http.post(`${this.baseUrl}/patient/cancelSlot`,{appointmentId:t},this.getOptions()).pipe(i(e=>r(()=>e)))}getMyReviews(){return this.http.get(`${this.baseUrl}/myReviews`,this.getOptions()).pipe(s(t=>t.reviews))}submitReview(t,e,a){return this.http.post(`${this.baseUrl}/patient/review`,{doctorId:t,rating:e,comment:a},this.getOptions()).pipe(i(n=>r(()=>n)))}submitUpdatedReview(t,e,a){return console.log("Submitting updated review:",{reviewId:t,rating:e,comment:a}),this.http.put(`${this.baseUrl}/patient/review`,{reviewId:t,rating:e,comment:a},this.getOptions()).pipe(i(n=>r(()=>n)))}deleteReview(t){return this.http.delete(`${this.baseUrl}/patient/review/${t}`,this.getOptions()).pipe(i(e=>r(()=>e)))}getRecords(){return this.http.get(`${this.baseUrl}/patient/records`,this.getOptions()).pipe(s(t=>t.records.map(e=>b(l({},e),{fileUrl:`${this.baseSocketUrl}${e.fileUrl}`}))))}uploadMedicalRecord(t,e,a){let n=new FormData;return n.append("file",t),n.append("type",e.toUpperCase()),a&&n.append("notes",a),this.http.post(`${this.baseUrl}/patient/records`,n,this.getOptions()).pipe(s(f=>f.record))}deleteRecord(t){return this.http.delete(`${this.baseUrl}/patient/records/${t}`,this.getOptions()).pipe(i(e=>r(()=>e)))}getDoctors(){return this.http.get(`${this.baseUrl}/patient/getDoctors`,this.getOptions()).pipe(c(t=>console.log("Doctors response (tap):",t)))}getDoctorById(t){return this.http.get(`${this.baseUrl}/patient/doctor/${t}`,this.getOptions())}getMyDoctors(){return this.http.get(`${this.baseUrl}/patient/getMyDoctors`,this.getOptions()).pipe(s(t=>t.doctors))}sendMessageToServer(t,e){return this.http.post(`${this.baseUrl}/chat/send`,{receiverId:e,content:t,type:"TEXT"},this.getOptions())}getChatHistory(t){return this.http.get(`${this.baseUrl}/chat/history/${t}`,this.getOptions())}getTransactions(){return this.http.get(`${this.baseUrl}/transactions`,this.getOptions()).pipe(s(t=>t||[]))}reserveSlot(t,e){return this.http.post(`${this.baseUrl}/patient/reserveSlot`,{slotId:t,serviceType:e},this.getOptions())}getProfile(){return this.http.get(`${this.baseUrl}/patient/profile`,this.getOptions()).pipe(s(t=>t))}updateProfile(t){return this.http.put(`${this.baseUrl}/patient/update`,t,this.getOptions())}sendOtp(t){return this.http.post(`${this.baseUrl}/patient/phone/send-otp`,{newPhone:t},this.getOptions())}verifyOtp(t){return this.http.post(`${this.baseUrl}/patient/phone/verify-otp`,{otp:t},this.getOptions())}sendFileToServer(t){return this.http.post(`${this.baseUrl}/chat/send-file`,t,this.getOptions())}getDepartments(){return this.http.get(`${this.baseUrl}/departments`,this.getOptions()).pipe(i(t=>r(()=>t)))}static \u0275fac=function(e){return new(e||p)};static \u0275prov=d({token:p,factory:p.\u0275fac,providedIn:"root"})};export{v as a};
