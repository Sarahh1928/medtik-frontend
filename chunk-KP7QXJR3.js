import{a as l}from"./chunk-GFO3VGSQ.js";import{a as t}from"./chunk-F426BNRH.js";import{$ as r,k as s,l as i}from"./chunk-BE7DJT6W.js";var S=class c{socket=null;SOCKET_URL=t.socketUrl;connected$=new i(!1);notification$=new s;onlineUsers=new Set;onlineUsers$=new i(new Set);connect(e,n){if(console.log("\u{1F9E9} [SocketService] Attempting connection..."),console.log("\u27A1\uFE0F SOCKET_URL:",this.SOCKET_URL),console.log("\u27A1\uFE0F ENV production:",t.production),console.log("\u27A1\uFE0F AUTH Payload:",{userId:e,role:n}),this.socket){console.warn("\u26A0\uFE0F [SocketService] Already connected, skipping new connection.");return}this.socket=l(this.SOCKET_URL,{auth:{userId:e,role:n},transports:["websocket"],reconnection:!0,withCredentials:t.production,secure:t.production}),console.log("\u{1F9E0} [SocketService] Socket initialized, waiting for connection..."),this.socket.on("connect",()=>{console.log("\u2705 [SocketService] Connected to server"),console.log("\u{1F50C} Socket ID:",this.socket.id),this.connected$.next(!0)}),this.socket.on("connect_error",o=>{console.error("\u274C [SocketService] Connection error:",o)}),this.socket.on("reconnect_attempt",o=>{console.log(`\u{1F501} [SocketService] Reconnect attempt #${o}`)}),this.socket.on("reconnect_failed",()=>{console.error("\u{1F480} [SocketService] Reconnect failed!")}),this.socket.on("disconnect",o=>{console.warn("\u26A0\uFE0F [SocketService] Disconnected:",o),this.connected$.next(!1)}),this.socket.on("notification:new",o=>{console.log("\u{1F4E9} [SocketService] New notification:",o),this.notification$.next(o)}),this.socket.on("user:online",({userId:o})=>{console.log(`\u{1F7E2} [SocketService] User online: ${o}`),this.onlineUsers.add(o),this.onlineUsers$.next(new Set(this.onlineUsers))}),this.socket.on("user:offline",({userId:o})=>{console.log(`\u{1F534} [SocketService] User offline: ${o}`),this.onlineUsers.delete(o),this.onlineUsers$.next(new Set(this.onlineUsers))}),this.socket.on("online:all",o=>{console.log("\u{1F465} [SocketService] Online users snapshot:",o),this.onlineUsers=new Set(o),this.onlineUsers$.next(new Set(this.onlineUsers))})}on(e,n){console.log(`\u{1FA9D} [SocketService] Listening for event "${e}"`),this.socket?.on(e,n)}once(e,n){console.log(`\u{1FA9D} [SocketService] One-time listen for event "${e}"`),this.socket?.once(e,n)}emit(e,n){console.log(`\u{1F4E4} [SocketService] Emitting event "${e}" with data:`,n),this.socket?.emit(e,n)}disconnect(){console.log("\u{1F9E8} [SocketService] Manual disconnect triggered."),this.socket?.disconnect(),this.socket=null,this.connected$.next(!1)}getSocketId(){let e=this.socket?.id;return console.log("\u{1F194} [SocketService] Current socket ID:",e),e}isOnline(e){let n=this.onlineUsers.has(e);return console.log(`\u{1F9D0} [SocketService] Is user ${e} online?`,n),n}static \u0275fac=function(n){return new(n||c)};static \u0275prov=r({token:c,factory:c.\u0275fac,providedIn:"root"})};export{S as a};
